[project]
name = "adh-cli"
version = "0.1.0"
description = "A TUI application using Textual and Google ADK"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "textual>=6.2.0",
    "google-genai>=1.39.1",
    "google-adk>=1.15.1",
    "rich>=14.1.0",
    "click>=8.1.7,<8.3",
    "python-dotenv>=1.1.1",
    "pyyaml>=6.0.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "coverage>=7.10.7",
    "textual-dev>=1.7.0",
    "taskipy>=1.14.1",
    "ruff>=0.6.8",
    "mypy>=1.11.2",
    "pre-commit>=3.8.0",
    "build>=1.2.2.post1",
]

[project.scripts]
adh-cli = "adh_cli.__main__:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
adh_cli = [
    "ui/*.tcss",
    "policies/definitions/*.yaml",
    "policies/defaults/*.yaml",
    "agents/README.md",
    "agents/*/agent.md",
]

[tool.setuptools.packages.find]
include = ["adh_cli*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["adh_cli"]
omit = ["*/tests/*", "*/__pycache__/*", "*/venv/*", "*/.venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Custom scripts using taskipy (similar to npm scripts)
[tool.taskipy.tasks]
test = "pytest"
test-v = "pytest -v"
test-cov = "pytest --cov=adh_cli --cov-report=term-missing"
test-watch = "pytest-watch"
lint = "ruff check adh_cli tests"
format = "ruff format adh_cli tests"
lint-fix = "ruff check --fix adh_cli tests"
typecheck = "mypy adh_cli"
dev = "textual run --dev adh_cli.app:ADHApp"
console = "textual console"
build = "python -m build"
clean = "rm -rf build dist *.egg-info .pytest_cache .coverage"
install-dev = "uv pip install -e '.[dev]'"
run = "adh-cli"
docs-tools = "python scripts/generate_tools_docs.py"
hooks-install = "pre-commit install && pre-commit install -t pre-push"
hooks = "pre-commit run --all-files"
